// Mocks generated by Mockito 5.4.2 from annotations
// in solid_test/test/features/color_generator/presentation/providers/color_generator_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:math' as _i8;
import 'dart:ui' as _i7;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:solid_test/core/core.dart' as _i5;
import 'package:solid_test/features/color_generator/domain/repositories/color_generator_repository.dart'
    as _i3;
import 'package:solid_test/features/color_generator/model/load_colors_model.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ColorGeneratorRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockColorGeneratorRepository extends _i1.Mock
    implements _i3.ColorGeneratorRepository {
  MockColorGeneratorRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.LoadColorsModel>> loadColors() =>
      (super.noSuchMethod(
        Invocation.method(
          #loadColors,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.LoadColorsModel>>.value(
                _FakeEither_0<_i5.Failure, _i6.LoadColorsModel>(
          this,
          Invocation.method(
            #loadColors,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.LoadColorsModel>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> saveColors({
    required _i7.Color? previousColor,
    required _i7.Color? color,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveColors,
          [],
          {
            #previousColor: previousColor,
            #color: color,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #saveColors,
            [],
            {
              #previousColor: previousColor,
              #color: color,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}

/// A class which mocks [Random].
///
/// See the documentation for Mockito's code generation for more information.
class MockRandom extends _i1.Mock implements _i8.Random {
  MockRandom() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int nextInt(int? max) => (super.noSuchMethod(
        Invocation.method(
          #nextInt,
          [max],
        ),
        returnValue: 0,
      ) as int);
  @override
  double nextDouble() => (super.noSuchMethod(
        Invocation.method(
          #nextDouble,
          [],
        ),
        returnValue: 0.0,
      ) as double);
  @override
  bool nextBool() => (super.noSuchMethod(
        Invocation.method(
          #nextBool,
          [],
        ),
        returnValue: false,
      ) as bool);
}
